// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  displayName         String
  email               String         @unique
  password            String?
  expirationToken     String?
  expirationTokenDate DateTime?
  refreshTokens       RefreshToken[]
  post                Post[]
  roles               String[]       @default(["user"])
  notes               Notes[]
  likes               Likes[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Likes {
  id     String @id @default(uuid())
  userId String
  noteId String
  user   User   @relation(fields: [userId], references: [id])
  note   Notes  @relation(fields: [noteId], references: [id])

  @@unique([userId, noteId])
}

model Notes {
  id String @id @default(uuid())

  subject String
  title   String
  content String

  filesUrls String[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  Proffessor   Proffessor? @relation(fields: [proffessorId], references: [id])
  proffessorId String?

  createdAt DateTime @default(now())
  likes     Likes[]
}

model Post {
  id      String @id @default(uuid())
  title   String
  content String

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proffessor   Proffessor? @relation(fields: [proffessorId], references: [id])
  proffessorId String?
}

model School {
  id         String       @id @default(uuid())
  name       String
  Proffessor Proffessor[]
  Post       Post[]
}

model Proffessor {
  id      String @id @default(uuid())
  name    String
  subject String

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[] // Relación uno a muchos con Post
  notes Notes[] // Relación uno a muchos con Notes
}
